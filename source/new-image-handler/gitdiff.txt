diff --git a/source/constructs/package.json b/source/constructs/package.json
index f0e7b10..936e230 100644
--- a/source/constructs/package.json
+++ b/source/constructs/package.json
@@ -18,10 +18,10 @@
     "test:update": "export BUCKET_NAME=TEST SOLUTION_NAME=serverless-image-handler VERSION=TEST_VERSION && jest --updateSnapshot",
     "upgrade-dependencies": "export CI=0 && npm-check-updates --upgrade --target=minor --reject='projen' && yarn install --check-files && yarn upgrade",
     "eslint": "eslint --ext .ts,.tsx --no-error-on-unmatched-pattern bin lib test",
-    "synth": "npx cdk synth",
-    "deploy": "npx cdk deploy",
-    "destroy": "npx cdk destroy",
-    "diff": "npx cdk diff",
+    "synth": "cdk synth",
+    "deploy": "cdk deploy",
+    "destroy": "cdk destroy",
+    "diff": "cdk diff",
     "postinstall": "cd ../new-image-handler && yarn"
   },
   "devDependencies": {
diff --git a/source/new-image-handler/.eslintrc.json b/source/new-image-handler/.eslintrc.json
index 013424d..16b08a8 100644
--- a/source/new-image-handler/.eslintrc.json
+++ b/source/new-image-handler/.eslintrc.json
@@ -4,17 +4,25 @@
     "node": true
   },
   "root": true,
-  "plugins": ["@typescript-eslint", "import"],
+  "plugins": [
+    "@typescript-eslint",
+    "import"
+  ],
   "parser": "@typescript-eslint/parser",
   "parserOptions": {
     "ecmaVersion": 2018,
     "sourceType": "module",
-    "project": "**tsconfig.eslint.json"
+    "project": "./tsconfig.eslint.json"
   },
-  "extends": ["plugin:import/typescript"],
+  "extends": [
+    "plugin:import/typescript"
+  ],
   "settings": {
     "import/parsers": {
-      "@typescript-eslint/parser": [".ts", ".tsx"]
+      "@typescript-eslint/parser": [
+        ".ts",
+        ".tsx"
+      ]
     },
     "import/resolver": {
       "node": {},
@@ -34,12 +42,23 @@
   "rules": {
     "radix": "error",
     "space-infix-ops": "error",
-    "spaced-comment": ["error", "always"],
+    "spaced-comment": [
+      "error",
+      "always"
+    ],
     "no-var": "error",
     "eqeqeq": "error",
-    "space-in-parens": ["error", "never"],
-    "indent": ["off"],
-    "@typescript-eslint/indent": ["error", 2],
+    "space-in-parens": [
+      "error",
+      "never"
+    ],
+    "indent": [
+      "off"
+    ],
+    "@typescript-eslint/indent": [
+      "error",
+      2
+    ],
     "quotes": [
       "error",
       "single",
@@ -47,7 +66,10 @@
         "avoidEscape": true
       }
     ],
-    "comma-dangle": ["error", "always-multiline"],
+    "comma-dangle": [
+      "error",
+      "always-multiline"
+    ],
     "comma-spacing": [
       "error",
       {
@@ -61,9 +83,18 @@
         "ignoreEOLComments": false
       }
     ],
-    "array-bracket-spacing": ["error", "never"],
-    "array-bracket-newline": ["error", "consistent"],
-    "object-curly-spacing": ["error", "always"],
+    "array-bracket-spacing": [
+      "error",
+      "never"
+    ],
+    "array-bracket-newline": [
+      "error",
+      "consistent"
+    ],
+    "object-curly-spacing": [
+      "error",
+      "always"
+    ],
     "object-curly-newline": [
       "error",
       {
@@ -77,7 +108,9 @@
         "allowAllPropertiesOnSameLine": true
       }
     ],
-    "keyword-spacing": ["error"],
+    "keyword-spacing": [
+      "error"
+    ],
     "brace-style": [
       "error",
       "1tbs",
@@ -85,10 +118,21 @@
         "allowSingleLine": true
       }
     ],
-    "space-before-blocks": ["error"],
-    "curly": ["error", "multi-line", "consistent"],
-    "@typescript-eslint/member-delimiter-style": ["error"],
-    "semi": ["error", "always"],
+    "space-before-blocks": [
+      "error"
+    ],
+    "curly": [
+      "error",
+      "multi-line",
+      "consistent"
+    ],
+    "@typescript-eslint/member-delimiter-style": [
+      "error"
+    ],
+    "semi": [
+      "error",
+      "always"
+    ],
     "max-len": [
       "error",
       {
@@ -100,38 +144,73 @@
         "ignoreRegExpLiterals": true
       }
     ],
-    "quote-props": ["error", "consistent-as-needed"],
-    "@typescript-eslint/no-require-imports": ["error"],
+    "quote-props": [
+      "error",
+      "consistent-as-needed"
+    ],
+    "@typescript-eslint/no-require-imports": [
+      "error"
+    ],
     "import/no-extraneous-dependencies": [
       "error",
       {
-        "devDependencies": ["**/test/**", "**/build-tools/**"],
+        "devDependencies": [
+          "**/test/**",
+          "**/build-tools/**"
+        ],
         "optionalDependencies": false,
         "peerDependencies": true
       }
     ],
-    "import/no-unresolved": ["error"],
+    "import/no-unresolved": [
+      "error"
+    ],
     "import/order": [
       "warn",
       {
-        "groups": ["builtin", "external"],
+        "groups": [
+          "builtin",
+          "external"
+        ],
         "alphabetize": {
           "order": "asc",
           "caseInsensitive": true
         }
       }
     ],
-    "no-duplicate-imports": ["error"],
-    "no-shadow": ["off"],
-    "@typescript-eslint/no-shadow": ["error"],
-    "key-spacing": ["error"],
-    "no-multiple-empty-lines": ["error"],
-    "@typescript-eslint/no-floating-promises": ["error"],
-    "no-return-await": ["off"],
-    "@typescript-eslint/return-await": ["error"],
-    "no-trailing-spaces": ["error"],
-    "dot-notation": ["error"],
-    "no-bitwise": ["error"],
+    "no-duplicate-imports": [
+      "error"
+    ],
+    "no-shadow": [
+      "off"
+    ],
+    "@typescript-eslint/no-shadow": [
+      "error"
+    ],
+    "key-spacing": [
+      "error"
+    ],
+    "no-multiple-empty-lines": [
+      "error"
+    ],
+    "@typescript-eslint/no-floating-promises": [
+      "error"
+    ],
+    "no-return-await": [
+      "off"
+    ],
+    "@typescript-eslint/return-await": [
+      "error"
+    ],
+    "no-trailing-spaces": [
+      "error"
+    ],
+    "dot-notation": [
+      "error"
+    ],
+    "no-bitwise": [
+      "error"
+    ],
     "@typescript-eslint/member-ordering": [
       "error",
       {
@@ -151,11 +230,13 @@
   },
   "overrides": [
     {
-      "files": [".projenrc.js"],
+      "files": [
+        ".projenrc.js"
+      ],
       "rules": {
         "@typescript-eslint/no-require-imports": "off",
         "import/no-extraneous-dependencies": "off"
       }
     }
   ]
-}
+}
\ No newline at end of file
diff --git a/source/new-image-handler/src/default.ts b/source/new-image-handler/src/default.ts
index 994146d..6331edb 100644
--- a/source/new-image-handler/src/default.ts
+++ b/source/new-image-handler/src/default.ts
@@ -5,19 +5,11 @@ import { InvalidArgument, IProcessor } from './processor';
 import { ImageProcessor } from './processor/image';
 import { StyleProcessor } from './processor/style';
 import { VideoProcessor } from './processor/video';
-import {
-  IBufferStore,
-  S3Store,
-  LocalStore,
-  MemKVStore,
-  DynamoDBStore,
-  IKVStore,
-} from './store';
+import { IBufferStore, S3Store, LocalStore, MemKVStore, DynamoDBStore, IKVStore } from './store';
 import * as style from './style.json';
 
 const PROCESSOR_MAP: { [key: string]: IProcessor } = {
   [ImageProcessor.getInstance().name]: ImageProcessor.getInstance(),
-  ['alicdnimage']: ImageProcessor.getInstance(),
   [StyleProcessor.getInstance().name]: StyleProcessor.getInstance(kvstore()),
   [VideoProcessor.getInstance().name]: VideoProcessor.getInstance(),
 };
@@ -40,15 +32,11 @@ export function getProcessor(name: string): IProcessor {
 
 export function bufferStore(p?: string): IBufferStore {
   if (config.isProd) {
-    if (!p) {
-      p = config.srcBucket;
-    }
+    if (!p) { p = config.srcBucket; }
     console.log(`use ${S3Store.name} s3://${p}`);
     return new S3Store(p);
   } else {
-    if (!p) {
-      p = path.join(__dirname, '../test/fixtures');
-    }
+    if (!p) { p = path.join(__dirname, '../test/fixtures'); }
     console.log(`use ${LocalStore.name} file://${p}`);
     return new LocalStore(p);
   }
@@ -64,28 +52,14 @@ export function kvstore(): IKVStore {
   }
 }
 
-export function parseRequest(
-  uri: string,
-  query: ParsedUrlQuery,
-): { uri: string; actions: string[] } {
+export function parseRequest(uri: string, query: ParsedUrlQuery): { uri: string; actions: string[] } {
   uri = uri.replace(/^\//, ''); // trim leading slash "/"
   const parts = uri.split(/@?!/, 2);
   if (parts.length === 1) {
-    if ('image_process' in query) {
-      // eslint-disable-next-line dot-notation
-      const image_process = (query['image_process'] as string) ?? '';
-      let actionparam = image_process.split('/').filter((x) => x);
-      actionparam.unshift('alicdnimage');
-      actionparam[1] = actionparam[1].replace(/resize/g, 'alicdnresize');
-      return {
-        uri: uri,
-        actions: actionparam,
-      };
-    }
     const x_oss_process = (query['x-oss-process'] as string) ?? '';
     return {
       uri: uri,
-      actions: x_oss_process.split('/').filter((x) => x),
+      actions: x_oss_process.split('/').filter(x => x),
     };
   }
   const stylename = (parts[1] ?? '').trim();
@@ -96,4 +70,4 @@ export function parseRequest(
     uri: parts[0],
     actions: ['style', stylename],
   };
-}
+}
\ No newline at end of file
diff --git a/source/new-image-handler/src/processor/image/alicdnimage.ts b/source/new-image-handler/src/processor/image/alicdnimage.ts
deleted file mode 100644
index 23b263f..0000000
--- a/source/new-image-handler/src/processor/image/alicdnimage.ts
+++ /dev/null
@@ -1,120 +0,0 @@
-import * as sharp from 'sharp';
-import { IImageContext } from '.';
-import { IActionOpts, InvalidArgument, ReadOnly } from '..';
-import * as is from '../../is';
-import { BaseImageAction } from './_base';
-
-export interface AliCDNResizeOpts extends IActionOpts {
-  w?: number;
-  h?: number;
-  l?: number;
-  s?: number;
-  fw?: number;
-  fh?: number;
-  p?: number;
-}
-
-export class AliCDNResizeAction extends BaseImageAction {
-  public readonly name: string = 'alicdnresize';
-
-  public validate(params: string[]): ReadOnly<AliCDNResizeOpts> {
-    const opt: AliCDNResizeOpts = {};
-    console.log(`options are ${params}`);
-    for (const param of params) {
-      if ('alicdnresize' === param || !param) {
-        continue;
-      }
-      const [k, v] = param.split('_');
-      if (k === 'w') {
-        opt.w = Number.parseInt(v, 10);
-      } else if (k === 'h') {
-        opt.h = Number.parseInt(v, 10);
-      } else if (k === 'l') {
-        opt.l = Number.parseInt(v, 10);
-      } else if (k === 's') {
-        opt.s = Number.parseInt(v, 10);
-      } else if (k === 'fw') {
-        opt.fw = Number.parseInt(v, 10);
-      } else if (k === 'fh') {
-        opt.fh = Number.parseInt(v, 10);
-      } else if (k === 'p') {
-        const p = Number.parseInt(v, 10);
-        if (is.inRange(p, 1, 1000)) {
-          opt.p = p;
-        } else {
-          throw new InvalidArgument(`Unkown p: "${v}"`);
-        }
-      } else {
-        throw new InvalidArgument(`Unkown param: "${k}"`);
-      }
-    }
-    return opt;
-  }
-
-  public beforeProcess(
-    ctx: IImageContext,
-    params: string[],
-    index: number,
-  ): void {
-    const metadata = ctx.metadata;
-    const aliopt = this.validate(params);
-    if ((aliopt.fw && !aliopt.fh) || (!aliopt.fw && aliopt.fh)) {
-      ctx.mask.disable(index);
-    }
-    if ('gif' === metadata.format) {
-      const opt = buildSharpOpt(ctx, aliopt);
-      const isEnlargingWidth =
-        opt.width && metadata.width && opt.width > metadata.width;
-      const isEnlargingHeight =
-        opt.height && metadata.pageHeight && opt.height > metadata.pageHeight;
-      if (isEnlargingWidth || isEnlargingHeight) {
-        ctx.mask.disable(index);
-      }
-    }
-  }
-
-  public async process(ctx: IImageContext, params: string[]): Promise<void> {
-    let aliopt = this.validate(params);
-    if (aliopt.fw && aliopt.fh) {
-      ctx.image.resize(aliopt.fw, aliopt.fh);
-    } else {
-      const opt = buildSharpOpt(ctx, this.validate(params));
-      ctx.image.resize(null, null, opt);
-    }
-  }
-}
-
-function buildSharpOpt(
-  ctx: IImageContext,
-  o: AliCDNResizeOpts,
-): sharp.ResizeOptions {
-  const opt: sharp.ResizeOptions = {
-    width: o.w,
-    height: o.h,
-  };
-  const metadata = ctx.metadata;
-  if (!(metadata.width && metadata.height)) {
-    throw new InvalidArgument("Can't read image's width and height");
-  }
-
-  if (o.p && !o.w && !o.h) {
-    opt.withoutEnlargement = false;
-    opt.width = Math.round(metadata.width * o.p * 0.01);
-  } else {
-    if (o.l) {
-      if (metadata.width > metadata.height) {
-        opt.width = o.l;
-      } else {
-        opt.height = o.l;
-      }
-    }
-    if (o.s) {
-      if (metadata.height < metadata.width) {
-        opt.height = o.s;
-      } else {
-        opt.width = o.s;
-      }
-    }
-  }
-  return opt;
-}
diff --git a/source/new-image-handler/src/processor/image/index.ts b/source/new-image-handler/src/processor/image/index.ts
index 96d9186..c5e41ec 100644
--- a/source/new-image-handler/src/processor/image/index.ts
+++ b/source/new-image-handler/src/processor/image/index.ts
@@ -1,15 +1,7 @@
 import * as sharp from 'sharp';
-import {
-  Features,
-  IAction,
-  InvalidArgument,
-  IProcessContext,
-  IProcessor,
-  IProcessResponse,
-} from '../../processor';
+import { Features, IAction, InvalidArgument, IProcessContext, IProcessor, IProcessResponse } from '../../processor';
 import { IBufferStore } from '../../store';
 import { ActionMask } from './_base';
-import { AliCDNResizeAction } from './alicdnimage';
 import { AutoOrientAction } from './auto-orient';
 import { BlurAction } from './blur';
 import { BrightAction } from './bright';
@@ -22,6 +14,7 @@ import { GreyAction } from './grey';
 import { IndexCropAction } from './indexcrop';
 import { InfoAction } from './info';
 import { InterlaceAction } from './interlace';
+import { QualityAction } from './quality';
 import { ResizeAction } from './resize';
 import { RotateAction } from './rotate';
 import { RoundedCornersAction } from './rounded-corners';
@@ -37,7 +30,6 @@ export interface IImageContext extends IProcessContext {
   image: sharp.Sharp;
   metadata: sharp.Metadata;
   info?: IImageInfo;
-  needHandle?: boolean;
 }
 
 const MB = 1024 * 1024;
@@ -56,7 +48,7 @@ export class ImageProcessor implements IProcessor {
 
   public readonly name: string = 'image';
 
-  private constructor() {}
+  private constructor() { }
 
   public setMaxGifSizeMB(value: number) {
     if (value > 0) {
@@ -74,11 +66,7 @@ export class ImageProcessor implements IProcessor {
     }
   }
 
-  public async newContext(
-    uri: string,
-    actions: string[],
-    bufferStore: IBufferStore,
-  ): Promise<IImageContext> {
+  public async newContext(uri: string, actions: string[], bufferStore: IBufferStore): Promise<IImageContext> {
     const ctx: IProcessContext = {
       uri,
       actions,
@@ -90,39 +78,19 @@ export class ImageProcessor implements IProcessor {
       },
       headers: {},
     };
-    // let isAliCdnImage: boolean = false;
-    let thval: number = 0;
-    // actions.includes('alicdnimage')
-    //   ? (isAliCdnImage = true)
-    //   : (isAliCdnImage = false);
     for (let i = 0; i < actions.length; i++) {
       const action = actions[i];
-      if (this.name === action || !action || action === 'alicdnimage') {
+      if ((this.name === action) || (!action)) {
         continue;
       }
       // "<action-name>,<param-1>,<param-2>,..."
       const params = action.split(',');
-      console.log(`initial params is ${params}`);
-      let actionname: string = '';
-      // isAliCdnImage && params[0] === 'resize'
-      //  ? (actionname = 'alicdnresize')
-      //  : (actionname = params[0]);
-      actionname = params[0];
-      const act = this.action(actionname);
-      if (actionname !== 'threshold' && !act) {
-        throw new InvalidArgument(`Unkown action: "${actionname}"`);
-      }
-      if (actionname === 'threshold') {
-        thval = parseInt(params[1], 10);
-        if (isNaN(thval)) {
-          throw new InvalidArgument('Threshold must be a number');
-        }
-      }
-      if (actionname === 'threshold') {
-        continue;
-      } else {
-        act.beforeNewContext.bind(act)(ctx, params, i);
+      const name = params[0];
+      const act = this.action(name);
+      if (!act) {
+        throw new InvalidArgument(`Unkown action: "${name}"`);
       }
+      act.beforeNewContext.bind(act)(ctx, params, i);
     }
     const { buffer, headers } = await bufferStore.get(uri);
     let image;
@@ -133,52 +101,30 @@ export class ImageProcessor implements IProcessor {
       if (!('gif' === metadata.format)) {
         throw new InvalidArgument('Format must be Gif');
       }
-      if (!metadata.pages) {
-        throw new InvalidArgument("Can't read gif's pages");
+      if (!(metadata.pages)) {
+        throw new InvalidArgument('Can\'t read gif\'s pages');
       }
-      const pages = Math.min(
-        ctx.features[Features.LimitAnimatedFrames],
-        metadata.pages,
-      );
-      image = sharp(buffer, {
-        failOnError: false,
-        animated: ctx.features[Features.ReadAllAnimatedFrames],
-        pages,
-      });
+      const pages = Math.min(ctx.features[Features.LimitAnimatedFrames], metadata.pages);
+      image = sharp(buffer, { failOnError: false, animated: ctx.features[Features.ReadAllAnimatedFrames], pages });
       metadata = await image.metadata();
     } else {
-      image = sharp(buffer, {
-        failOnError: false,
-        animated: ctx.features[Features.ReadAllAnimatedFrames],
-      });
+      image = sharp(buffer, { failOnError: false, animated: ctx.features[Features.ReadAllAnimatedFrames] });
       metadata = await image.metadata();
     }
     if ('gif' === metadata.format) {
       image.gif({ effort: 1 }); // https://github.com/lovell/sharp/issues/3176
 
-      if (metadata.size && metadata.size > this._maxGifSizeMB * MB) {
-        console.log(
-          `Gif processing skipped. The image size exceeds ${this._maxGifSizeMB} MB`,
-        );
+      if (metadata.size && metadata.size > (this._maxGifSizeMB * MB)) {
+        console.log(`Gif processing skipped. The image size exceeds ${this._maxGifSizeMB} MB`);
         ctx.mask.disableAll();
       } else if (metadata.pages && metadata.pages > this._maxGifPages) {
-        console.log(
-          `Gif processing skipped. The image pages exceeds ${this._maxGifPages}`,
-        );
+        console.log(`Gif processing skipped. The image pages exceeds ${this._maxGifPages}`);
         ctx.mask.disableAll();
       }
     }
-    if ('png' === metadata.format && metadata.size && metadata.size > 5 * MB) {
+    if ('png' === metadata.format && metadata.size && metadata.size > (5 * MB)) {
       image.png({ adaptiveFiltering: true });
     }
-    let isHandle: boolean = true;
-    if (thval > 0 && metadata.size && metadata.size < thval) {
-      console.log(
-        `Image processing skipped. The image size less than the thredshold ${thval}`,
-      );
-      isHandle = false;
-      ctx.mask.disableAll();
-    }
 
     return {
       uri: ctx.uri,
@@ -189,7 +135,6 @@ export class ImageProcessor implements IProcessor {
       headers: Object.assign(ctx.headers, headers),
       metadata,
       image,
-      needHandle: isHandle,
     };
   }
 
@@ -201,21 +146,15 @@ export class ImageProcessor implements IProcessor {
       throw new InvalidArgument('Invalid image context! No "actions" field.');
     }
 
-    if (ctx.features[Features.AutoOrient]) {
-      ctx.image.rotate();
-    }
+    if (ctx.features[Features.AutoOrient]) { ctx.image.rotate(); }
 
     ctx.mask.forEachAction((action, _, index) => {
-      console.log(`the handle action is ${action} and ${ctx.needHandle}`);
-      if (this.name === action || !action || action === 'alicdnimage') {
+      if ((this.name === action) || (!action)) {
         return;
       }
       // "<action-name>,<param-1>,<param-2>,..."
       const params = action.split(',');
       const name = params[0];
-      if (name === 'threshold') {
-        return;
-      }
       const act = this.action(name);
       if (!act) {
         throw new InvalidArgument(`Unkown action: "${name}"`);
@@ -223,46 +162,33 @@ export class ImageProcessor implements IProcessor {
       act.beforeProcess.bind(act)(ctx, params, index);
     });
     const enabledActions = ctx.mask.filterEnabledActions();
-    const nothing2do =
-      enabledActions.length === 0 ||
-      !ctx.needHandle ||
-      (enabledActions.length === 1 && this.name === enabledActions[0]);
+    const nothing2do = (enabledActions.length === 0) || ((enabledActions.length === 1) && (this.name === enabledActions[0]));
 
-    if (nothing2do && !ctx.features[Features.AutoWebp]) {
+    if (nothing2do && (!ctx.features[Features.AutoWebp])) {
       const { buffer } = await ctx.bufferStore.get(ctx.uri);
       return { data: buffer, type: ctx.metadata.format! };
     }
 
     for (const action of enabledActions) {
-      if (this.name === action || !action || action === 'alicdnimage') {
+      if ((this.name === action) || (!action)) {
         continue;
       }
       // "<action-name>,<param-1>,<param-2>,..."
       const params = action.split(',');
-      console.log(`params is ${params}`);
       const name = params[0];
-      if (name === 'threshold') {
-        continue;
-      }
       const act = this.action(name);
       if (!act) {
         throw new InvalidArgument(`Unkown action: "${name}"`);
       }
       await act.process(ctx, params);
 
-      if (ctx.features[Features.ReturnInfo]) {
-        break;
-      }
-    }
-    if (ctx.features[Features.AutoWebp]) {
-      ctx.image.webp();
+      if (ctx.features[Features.ReturnInfo]) { break; }
     }
+    if (ctx.features[Features.AutoWebp]) { ctx.image.webp(); }
     if (ctx.features[Features.ReturnInfo]) {
       return { data: ctx.info, type: 'application/json' };
     } else {
-      const { data, info } = await ctx.image.toBuffer({
-        resolveWithObject: true,
-      });
+      const { data, info } = await ctx.image.toBuffer({ resolveWithObject: true });
       return { data: data, type: 'image/' + info.format };
     }
   }
@@ -283,7 +209,7 @@ export class ImageProcessor implements IProcessor {
 // Register actions
 ImageProcessor.getInstance().register(
   new ResizeAction(),
-  new AliCDNResizeAction(),
+  new QualityAction(),
   new BrightAction(),
   new FormatAction(),
   new BlurAction(),
@@ -303,3 +229,5 @@ ImageProcessor.getInstance().register(
   new StripMetadataAction(),
   new ThresholdAction(),
 );
+
+
diff --git a/source/new-image-handler/src/processor/image/resize.ts b/source/new-image-handler/src/processor/image/resize.ts
index a3a46a5..44e223e 100644
--- a/source/new-image-handler/src/processor/image/resize.ts
+++ b/source/new-image-handler/src/processor/image/resize.ts
@@ -9,7 +9,7 @@ export const enum Mode {
   MFIT = 'mfit',
   FILL = 'fill',
   PAD = 'pad',
-  FIXED = 'fixed',
+  FIXED = 'fixed'
 }
 
 export interface ResizeOpts extends IActionOpts {
@@ -33,7 +33,7 @@ export class ResizeAction extends BaseImageAction {
       color: '#FFFFFF',
     };
     for (const param of params) {
-      if (this.name === param || !param) {
+      if ((this.name === param) || (!param)) {
         continue;
       }
       const [k, v] = param.split('_');
@@ -46,21 +46,14 @@ export class ResizeAction extends BaseImageAction {
       } else if (k === 's') {
         opt.s = Number.parseInt(v, 10);
       } else if (k === 'm') {
-        if (
-          v &&
-          (v === Mode.LFIT ||
-            v === Mode.MFIT ||
-            v === Mode.FILL ||
-            v === Mode.PAD ||
-            v === Mode.FIXED)
-        ) {
+        if (v && ((v === Mode.LFIT) || (v === Mode.MFIT) || (v === Mode.FILL) || (v === Mode.PAD) || (v === Mode.FIXED))) {
           opt.m = v;
         } else {
           throw new InvalidArgument(`Unkown m: "${v}"`);
         }
       } else if (k === 'limit') {
         if (v && (v === '0' || v === '1')) {
-          opt.limit = v === '1';
+          opt.limit = (v === '1');
         } else {
           throw new InvalidArgument(`Unkown limit: "${v}"`);
         }
@@ -85,18 +78,12 @@ export class ResizeAction extends BaseImageAction {
     return opt;
   }
 
-  public beforeProcess(
-    ctx: IImageContext,
-    params: string[],
-    index: number,
-  ): void {
+  public beforeProcess(ctx: IImageContext, params: string[], index: number): void {
     const metadata = ctx.metadata;
     if ('gif' === metadata.format) {
       const opt = buildSharpOpt(ctx, this.validate(params));
-      const isEnlargingWidth =
-        opt.width && metadata.width && opt.width > metadata.width;
-      const isEnlargingHeight =
-        opt.height && metadata.pageHeight && opt.height > metadata.pageHeight;
+      const isEnlargingWidth = (opt.width && metadata.width && opt.width > metadata.width);
+      const isEnlargingHeight = (opt.height && metadata.pageHeight && (opt.height > metadata.pageHeight));
       if (isEnlargingWidth || isEnlargingHeight) {
         ctx.mask.disable(index);
       }
@@ -130,10 +117,10 @@ function buildSharpOpt(ctx: IImageContext, o: ResizeOpts): sharp.ResizeOptions {
   }
   const metadata = ctx.metadata;
   if (!(metadata.width && metadata.height)) {
-    throw new InvalidArgument("Can't read image's width and height");
+    throw new InvalidArgument('Can\'t read image\'s width and height');
   }
 
-  if (o.p && !o.w && !o.h) {
+  if (o.p && (!o.w) && (!o.h)) {
     opt.withoutEnlargement = false;
     opt.width = Math.round(metadata.width * o.p * 0.01);
   } else {
@@ -153,4 +140,4 @@ function buildSharpOpt(ctx: IImageContext, o: ResizeOpts): sharp.ResizeOptions {
     }
   }
   return opt;
-}
+}
\ No newline at end of file
